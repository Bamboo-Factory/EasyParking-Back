# Script de configuraci√≥n de base de datos para EasyParking
# Configurado espec√≠ficamente para Lima, Per√∫

param(
    [string]$ConnectionString = "Server=(localdb)\mssqllocaldb;Database=EasyParkingDb;Trusted_Connection=true;MultipleActiveResultSets=true",
    [switch]$SkipMigrations = $false,
    [switch]$SkipSeedData = $false,
    [switch]$UpdateToLima = $false
)

# Leer variables del archivo .env si existe y construir la cadena de conexi√≥n si no se pasa por par√°metro
$envPath = ".env"
if (-not $PSBoundParameters.ContainsKey('ConnectionString')) {
    if (Test-Path $envPath) {
        Get-Content $envPath | ForEach-Object {
            if ($_ -match "^\s*([^#][^=]*)=(.*)$") {
                $key = $matches[1].Trim()
                $value = $matches[2].Trim()
                [System.Environment]::SetEnvironmentVariable($key, $value)
            }
        }
        $dbServer = $env:DB_SERVER
        $dbName = $env:DB_NAME
        $dbUser = $env:DB_USER
        $dbPassword = $env:DB_PASSWORD
        if ($dbServer -and $dbName -and $dbUser -and $dbPassword) {
            $ConnectionString = "Server=$dbServer;Database=$dbName;User Id=$dbUser;Password=$dbPassword;MultipleActiveResultSets=true"
        }
    }
}

Write-Host "üöÄ Configurando base de datos para EasyParking - Lima, Per√∫" -ForegroundColor Green
Write-Host ""

# Verificar si .NET est√° instalado
try {
    $dotnetVersion = dotnet --version
    Write-Host "‚úÖ .NET SDK encontrado: $dotnetVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Error: .NET SDK no encontrado. Por favor instala .NET 8 SDK." -ForegroundColor Red
    exit 1
}

# Verificar si Entity Framework Tools est√° instalado
try {
    $efVersion = dotnet ef --version
    Write-Host "‚úÖ Entity Framework Tools encontrado: $efVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ö†Ô∏è  Entity Framework Tools no encontrado. Instalando..." -ForegroundColor Yellow
    dotnet tool install --global dotnet-ef
    Write-Host "‚úÖ Entity Framework Tools instalado" -ForegroundColor Green
}

Write-Host ""

# Restaurar dependencias
Write-Host "üì¶ Restaurando dependencias..." -ForegroundColor Blue
dotnet restore
if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå Error al restaurar dependencias" -ForegroundColor Red
    exit 1
}
Write-Host "‚úÖ Dependencias restauradas" -ForegroundColor Green

Write-Host ""

# Aplicar migraciones
if (-not $SkipMigrations) {
    Write-Host "üóÑÔ∏è  Aplicando migraciones..." -ForegroundColor Blue
    
    # Verificar si hay migraciones pendientes
    $migrations = dotnet ef migrations list --project EasyParking.Infrastructure --startup-project EasyParking.API --no-build
    if ($LASTEXITCODE -ne 0) {
        Write-Host "‚ùå Error al listar migraciones" -ForegroundColor Red
        exit 1
    }
    
    Write-Host "üìã Migraciones encontradas:" -ForegroundColor Cyan
    $migrations | ForEach-Object { Write-Host "   $_" -ForegroundColor Gray }
    
    # Aplicar migraciones
    dotnet ef database update --project EasyParking.Infrastructure --startup-project EasyParking.API
    if ($LASTEXITCODE -ne 0) {
        Write-Host "‚ùå Error al aplicar migraciones" -ForegroundColor Red
        exit 1
    }
    Write-Host "‚úÖ Migraciones aplicadas correctamente" -ForegroundColor Green
} else {
    Write-Host "‚è≠Ô∏è  Saltando aplicaci√≥n de migraciones" -ForegroundColor Yellow
}

Write-Host ""

# Insertar datos de ejemplo
if (-not $SkipSeedData) {
    Write-Host "üå± Insertando datos de ejemplo de Lima, Per√∫..." -ForegroundColor Blue
    
    # Verificar si el archivo de datos existe
    $seedDataPath = "EasyParking.Infrastructure\Data\SeedData.sql"
    if (Test-Path $seedDataPath) {
        Write-Host "üìÑ Archivo de datos encontrado: $seedDataPath" -ForegroundColor Cyan
        
        # Extraer la cadena de conexi√≥n del archivo de configuraci√≥n
        $appSettingsPath = "EasyParking.API\appsettings.Development.json"
        if (Test-Path $appSettingsPath) {
            $appSettings = Get-Content $appSettingsPath | ConvertFrom-Json
            $dbConnectionString = $appSettings.ConnectionStrings.DefaultConnection
        } else {
            $dbConnectionString = $ConnectionString
        }
        
        Write-Host "üîó Usando cadena de conexi√≥n: $dbConnectionString" -ForegroundColor Cyan
        
        # Ejecutar script SQL
        try {
            $sqlContent = Get-Content $seedDataPath -Raw
            $sqlConnection = New-Object System.Data.SqlClient.SqlConnection($dbConnectionString)
            $sqlConnection.Open()
            $sqlCommand = New-Object System.Data.SqlClient.SqlCommand($sqlContent, $sqlConnection)
            $sqlCommand.ExecuteNonQuery()
            $sqlConnection.Close()
            
            Write-Host "‚úÖ Datos de ejemplo insertados correctamente" -ForegroundColor Green
            Write-Host "   üìç Ubicaciones en Lima, Per√∫:" -ForegroundColor Cyan
            Write-Host "      ‚Ä¢ Plaza San Mart√≠n (Centro Hist√≥rico)" -ForegroundColor Gray
            Write-Host "      ‚Ä¢ Universidad San Marcos (San Miguel)" -ForegroundColor Gray
            Write-Host "      ‚Ä¢ Hospital Rebagliati (Jes√∫s Mar√≠a)" -ForegroundColor Gray
            Write-Host "      ‚Ä¢ Aeropuerto Jorge Ch√°vez (Callao)" -ForegroundColor Gray
            Write-Host "      ‚Ä¢ Plaza San Miguel (San Miguel)" -ForegroundColor Gray
            Write-Host "      ‚Ä¢ Larcomar (Miraflores)" -ForegroundColor Gray
            Write-Host "      ‚Ä¢ Jockey Plaza (Surco)" -ForegroundColor Gray
            Write-Host "      ‚Ä¢ Plaza Mayor (Centro Hist√≥rico)" -ForegroundColor Gray
        } catch {
            Write-Host "‚ùå Error al insertar datos de ejemplo: $($_.Exception.Message)" -ForegroundColor Red
            Write-Host "üí° Aseg√∫rate de que SQL Server est√© ejecut√°ndose y la base de datos sea accesible" -ForegroundColor Yellow
        }
    } else {
        Write-Host "‚ö†Ô∏è  Archivo de datos no encontrado: $seedDataPath" -ForegroundColor Yellow
    }
} else {
    Write-Host "‚è≠Ô∏è  Saltando inserci√≥n de datos de ejemplo" -ForegroundColor Yellow
}

Write-Host ""

# Actualizar datos existentes a Lima, Per√∫
if ($UpdateToLima) {
    Write-Host "üîÑ Actualizando datos existentes a ubicaciones en Lima, Per√∫..." -ForegroundColor Blue
    
    $updateDataPath = "EasyParking.Infrastructure\Data\UpdateToLimaPeru.sql"
    if (Test-Path $updateDataPath) {
        Write-Host "üìÑ Archivo de actualizaci√≥n encontrado: $updateDataPath" -ForegroundColor Cyan
        
        # Extraer la cadena de conexi√≥n del archivo de configuraci√≥n
        $appSettingsPath = "EasyParking.API\appsettings.Development.json"
        if (Test-Path $appSettingsPath) {
            $appSettings = Get-Content $appSettingsPath | ConvertFrom-Json
            $dbConnectionString = $appSettings.ConnectionStrings.DefaultConnection
        } else {
            $dbConnectionString = $ConnectionString
        }
        
        # Ejecutar script SQL de actualizaci√≥n
        try {
            $sqlContent = Get-Content $updateDataPath -Raw
            $sqlConnection = New-Object System.Data.SqlClient.SqlConnection($dbConnectionString)
            $sqlConnection.Open()
            $sqlCommand = New-Object System.Data.SqlClient.SqlCommand($sqlContent, $sqlConnection)
            $sqlCommand.ExecuteNonQuery()
            $sqlConnection.Close()
            
            Write-Host "‚úÖ Datos actualizados a Lima, Per√∫ correctamente" -ForegroundColor Green
        } catch {
            Write-Host "‚ùå Error al actualizar datos: $($_.Exception.Message)" -ForegroundColor Red
        }
    } else {
        Write-Host "‚ö†Ô∏è  Archivo de actualizaci√≥n no encontrado: $updateDataPath" -ForegroundColor Yellow
    }
}

Write-Host ""

# Verificar que la aplicaci√≥n compile correctamente
Write-Host "üî® Verificando compilaci√≥n..." -ForegroundColor Blue
dotnet build --no-restore
if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå Error en la compilaci√≥n" -ForegroundColor Red
    exit 1
}
Write-Host "‚úÖ Compilaci√≥n exitosa" -ForegroundColor Green

Write-Host ""

# Mostrar informaci√≥n final
Write-Host "üéâ ¬°Configuraci√≥n completada!" -ForegroundColor Green
Write-Host ""
Write-Host "üìã Resumen de la configuraci√≥n:" -ForegroundColor Cyan
Write-Host "   ‚úÖ Base de datos configurada" -ForegroundColor Green
Write-Host "   ‚úÖ Migraciones aplicadas" -ForegroundColor Green
if (-not $SkipSeedData) {
    Write-Host "   ‚úÖ Datos de ejemplo insertados (Lima, Per√∫)" -ForegroundColor Green
}
if ($UpdateToLima) {
    Write-Host "   ‚úÖ Datos actualizados a Lima, Per√∫" -ForegroundColor Green
}
Write-Host "   ‚úÖ Proyecto compilado correctamente" -ForegroundColor Green

Write-Host ""
Write-Host "üöÄ Para ejecutar la aplicaci√≥n:" -ForegroundColor Yellow
Write-Host "   dotnet run --project EasyParking.API" -ForegroundColor White

Write-Host ""
Write-Host "üåê URLs de acceso:" -ForegroundColor Yellow
Write-Host "   API: https://localhost:7001" -ForegroundColor White
Write-Host "   Swagger: https://localhost:7001/swagger" -ForegroundColor White

Write-Host ""
Write-Host "üó∫Ô∏è  Ejemplos de b√∫squeda por ubicaci√≥n en Lima:" -ForegroundColor Yellow
Write-Host "   ‚Ä¢ Plaza San Mart√≠n: GET /api/parkings/search/location?latitude=-12.0464&longitude=-77.0428&radiusKm=2.0" -ForegroundColor Gray
Write-Host "   ‚Ä¢ Miraflores: GET /api/parkings/search/location?latitude=-12.1464&longitude=-77.0228&radiusKm=3.0" -ForegroundColor Gray
Write-Host "   ‚Ä¢ Aeropuerto: GET /api/parkings/search/location?latitude=-12.0219&longitude=-77.1143&radiusKm=10.0" -ForegroundColor Gray

Write-Host ""
Write-Host "üìö Documentaci√≥n adicional:" -ForegroundColor Yellow
Write-Host "   ‚Ä¢ README.md - Documentaci√≥n general del proyecto" -ForegroundColor Gray
Write-Host "   ‚Ä¢ docs/LOCATION_SEARCH.md - Documentaci√≥n de b√∫squeda por ubicaci√≥n" -ForegroundColor Gray
Write-Host "   ‚Ä¢ docs/MIGRATIONS.md - Gu√≠a de migraciones" -ForegroundColor Gray

Write-Host ""
Write-Host "¬°EasyParking est√° listo para usar en Lima, Per√∫! üáµüá™" -ForegroundColor Green 